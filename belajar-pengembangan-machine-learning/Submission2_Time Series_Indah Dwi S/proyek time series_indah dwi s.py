# -*- coding: utf-8 -*-
"""Salinan dari Proyek Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WT9e4am4az18pbPhL8OVnEb-pvJrgT4W

Proyek Time Series-Indah Dwi Sulistiyawati
dsindah87@students.unnes.ac.id

sumber dataset : https://www.kaggle.com/mahirkukreja/delhi-weather-data

###Time Series Data Cuaca Delhi
"""

#upload dataet
from google.colab import files
files.upload()

#baca dataset
import pandas as pd
df = pd.read_csv("testset.csv")
df.head()

df.tail()

#info dataset
df.info()

#cek data null
df.isnull().sum()

#baris null akan diisi
df['datetime_utc']=pd.to_datetime(df['datetime_utc'])
df['datetime_utc'].head()
df[' _tempm'].fillna(df[' _tempm'].mean(), inplace=True)
df = df[['datetime_utc',' _tempm' ]]
df.head()

df.info()

"""###Bentuk Model dan Plot"""

delhi=df[['datetime_utc',' _tempm']].copy()
delhi['just_date'] = delhi['datetime_utc'].dt.date

delhiakhir=delhi.drop('datetime_utc',axis=1)
delhiakhir.set_index('just_date', inplace= True)
delhiakhir.head()

#info model baru
delhiakhir.info()

#grafik visualisasi
import matplotlib.pyplot as plt

plt.figure(figsize=(20,8))
plt.plot(delhiakhir)
plt.title('Cuaca Delhi')
plt.xlabel('Waktu')
plt.ylabel('Suhu')
plt.show()

#mendapatkan nilai dari data
date = df['datetime_utc'].values
temp = df[' _tempm'].values

#disini akan digunakan fungsi map lambda
import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

#split data
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(temp, date, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

#sekarang akan dibuat model
from keras.layers import Dense, LSTM

data_x_train = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=5000)
data_x_test = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

optimizer = tf.keras.optimizers.SGD(learning_rate=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

max = df[' _tempm'].max()
print('Nilai Max : ' )
print(max)

min = df[' _tempm'].min()
print('Nilai Min : ')
print(min)

x = (90.0 - 1.0) * (10 / 100)
print(x)

#akan digunakan callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x):
      self.model.stop_training = True
      print("\nProses dihentikan.MAE model < 10% dari skala data")
callbacks = myCallback()

tf.keras.backend.set_floatx('float64')
history = model.fit(data_x_train ,
                    epochs=10, 
                    validation_data=data_x_test, 
                    callbacks=[callbacks])

# plot dari hasil MAE
import matplotlib.pyplot as plt
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Grafik MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

# plot dari hasil loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Grafik Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()