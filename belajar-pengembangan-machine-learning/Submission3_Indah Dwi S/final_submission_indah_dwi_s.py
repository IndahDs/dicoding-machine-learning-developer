# -*- coding: utf-8 -*-
"""Final Submission-Indah Dwi S.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WkU0YZQQ1gZXuBsPjNdzFXJKE6l8Hcti

Image Classification Model Deployment 
(Indah Dwi S - dsindah87@students.unnes.ac.id)

sumber dataset : https://www.kaggle.com/sshikamaru/fruit-recognition
"""

import zipfile,os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import shutil
import pandas as pd 
print(tf.__version__)

from google.colab import drive
drive.mount('/content/drive')

local_zip = '/content/drive/MyDrive/IDCamp 2021/fruit recognition.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/')
zip_ref.close

path='/content/train/train'

train_datagen= ImageDataGenerator(
                   rescale = 1./255,
                   rotation_range=20,
                   shear_range=0.2,
                   zoom_range=0.2,
                   horizontal_flip=True,
                   validation_split=0.2,
                   fill_mode= 'nearest')
test_datagen= ImageDataGenerator( 
                   rescale = 1./255,
                   rotation_range=20,
                   shear_range=0.2,
                   zoom_range=0.2,
                   horizontal_flip=True,
                   validation_split=0.2,
                   fill_mode= 'nearest')

train_generator = train_datagen.flow_from_directory(
    path,
    target_size=(100,100),
    subset='training',
    class_mode='categorical')
validation_generator = test_datagen.flow_from_directory(
    path,
    target_size=(100,100),
    subset='validation',
    class_mode='categorical')

print(train_generator.class_indices)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(100, 100, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(33, activation='softmax')
])

#akan digunakan callback
class mycallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self,epoch,logs={}):
    if(logs.get('accuracy')>0.95):
      print("\nProses dihentikan. Akurasi telah mencapai 95%!")
      self.model.stop_training = True

callback = mycallback()

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

num_epoch = 100
history = model.fit(train_generator,
                    steps_per_epoch = 60,
                    epochs = num_epoch,
                    validation_data = validation_generator,
                    verbose = 1,
                    callbacks=callback)

#plotting
import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title("model loss")
plt.ylabel("loss")
plt.xlabel("Epoch")
plt.legend(['Train', ],loc="upper right")
plt.show()

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("model accuracy")
plt.xlabel("Accuracy")
plt.ylabel("Epoch")
plt.legend(['Train', 'validation'],loc="lower right")
plt.show()

# Commented out IPython magic to ensure Python compatibility.
from tensorflow.keras.models import load_model

import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()
for fn in uploaded.keys():
  path = fn
  img = image.load_img(path, target_size=(100, 100))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=32)
  predIdxs = np.argmax(classes, axis=1)
  
  print(fn)
  print(predIdxs)
  if classes[0, 0] != 0:
    print('Predict : Apple Braeburn')
  else:
    print('Predict : Apple Granny Smith' )

"""###Save model tf.lite"""

convert = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model =convert.convert()

with tf.io.gfile.GFile('model.tflite','wb') as f:
  f.write(tflite_model)